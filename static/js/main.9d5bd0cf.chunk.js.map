{"version":3,"sources":["logo.svg","Counter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleIncrement","handleStartClick","timer","setInterval","updateUI","handlePauseClick","clearInterval","handleStopClick","setState","hr","min","sec","milsec","handleChange","event","source","target","id","state","status","isec","value","imin","ihr","counter","bind","assertThisInitialized","ms","String","parseInt","length","s","Math","floor","spacing","margin","react_default","a","createElement","className","type","style","onClick","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","Counter_Counter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d5bd0cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Odometer from 'react-odometerjs';\nimport 'odometer/themes/odometer-theme-plaza.css';\nimport './App.css';\nexport default class Counter extends Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state =  \n        { \n          \n            hr : \"00\", \n            min : \"00\", \n            sec : \"00\", \n            milsec : \"00\",\n            \n            status : 0,\n            counter : 0,\n        };\n\n        this.updateUI = this.updateUI.bind(this);\n    }\n\n  \n    handleIncrement = ()=>\n    {\n        // this.setState\n    }\n\n    updateUI()\n    {\n        var ms  = String(parseInt((this.state.counter) % 100, 10));\n        // console.log(ms)\n        if(ms.length ==1)\n        {\n            ms = \"0\" + ms\n        }\n     \n        var s =  String(parseInt((this.state.counter/ 1000) % 60));\n\n        if(s.length==1)\n        {\n            s = \"0\" + s\n        }\n     \n\n        var min = String(parseInt((this.state.counter / 60000) % 60 , 10)); \n\n        if(min.length == 1)\n        {\n            min = \"0\" + min\n        }\n    \n        var hr = String(Math.floor((this.state.counter/ 3600000))); \n\n    \n\n        if(hr.length == 1)\n        {\n            hr = \"0\" + hr\n        }\n\n\n        this.setState(\n            {\n                counter : this.state.counter + 33,\n                milsec : ms,\n                sec : s,\n                min : min,\n                hr : hr\n            });\n    }\n\n    componentDidMount()\n    {\n        \n        if(this.timer)\n        {\n            this.timer = setInterval(this.updateUI, 33);\n        }\n    }\n    \n    handleStartClick = ()=>\n    {   \n      \n        if(!this.timer)\n        {\n          this.timer = setInterval(this.updateUI, 33);\n        }\n      \n        \n    }\n\n    handlePauseClick = ()=>\n    {\n        clearInterval(this.timer);\n        this.timer = 0;\n    }\n\n    handleStopClick = ()=>\n    {\n        clearInterval(this.timer);\n        this.setState({\n            hr : \"00\",\n            min : \"00\",\n            sec : \"00\",\n            milsec : \"00\"\n        });\n\n        this.timer = 0;\n    }\n  \n    handleChange =  (event)=>\n    {\n        let source = event.target.id;\n\n        if(this.state.status == 0)\n        {\n            if(source == \"isec\")\n            {\n                this.setState({isec : event.target.value})\n            }\n\n            else if(source == \"imin\")\n            {\n                this.setState({imin : event.target.value})\n            }\n\n            else if(source == \"ihr\")\n            {\n                this.setState({ihr : event.target.value})\n            }\n        }\n    }\n\n    render()\n    {\n        const inp = {\n            width : '60px',\n            height : '60px',\n            fontSize : '26px',\n            fontWeight : 'bold',\n            textAlign : 'center',\n            display: 'inline'\n        };\n\n        const spacing = \n        {\n            margin : '6px'\n        }\n        return (\n\n         <div id=\"test\">\n             <h1 className=\"title\">Stopwatch</h1>\n             <div className=\"digits test\">\n       \n             {this.state.hr} : {this.state.min} : {this.state.sec} : {this.state.milsec}\n             </div>\n             {/* <br></br>\n             <input type=\"text\" style={inp}  placeholder=\"0\" className=\"form-control\" id=\"ihr\" onChange={this.handleChange}></input>\n             <span style={inp}> hours </span>\n             <input type=\"text\" style={inp} className=\"form-control\" placeholder=\"0\" id=\"imin\" onChange={this.handleChange}></input>\n             <span style={inp}> minutes </span>\n             <input type=\"text\" style={inp} placeholder=\"0\" className=\"form-control\" id=\"isec\"  onChange={this.handleChange} value={this.state.sec}></input>\n             <span style={inp}> seconds </span> */}\n             <br></br>\n             <button type=\"button\" className=\"btn btn-success\" style={spacing} onClick={this.handleStartClick}>Start</button>\n             <button type=\"button\" className=\"btn btn-warning\" style={spacing} onClick={this.handlePauseClick}>Pause</button>\n             <button type=\"button\" className=\"btn btn-danger\" style={spacing} onClick={this.handleStopClick}>Stop</button>\n             <button type=\"button\" class=\"btn btn-secondary\">Lap</button>\n             <br>\n             </br>\n           \n            \n          \n         </div>\n          \n        \n        );\n    }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Counter from './Counter';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Counter delay=\"100\"/>\n        <Counter delay=\"200\"/>\n        <Counter delay=\"300\"/>\n      </div>\n      );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Counter from './Counter';\n\nReactDOM.render(<Counter />, document.getElementById('title'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}